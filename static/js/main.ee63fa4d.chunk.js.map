{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["todoReducer","state","action","type","map","e","i","id","completed","title","uuid","filter","initialTodos","backgroundColors","App","useReducer","todos","dispatch","useState","backgroundColor","setBackgroundColor","addTodoRef","useRef","useEffect","document","length","className","style","onChange","color","handleChangeBackground","target","value","key","label","ref","onKeyDown","event","keyCode","current","focus","handleKeyDown","checked","onClick","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAQMA,G,MAAc,SAACC,EAAOC,GAC1B,OAAQA,EAAOC,MACb,IANW,SAOT,OAAOF,EAAMG,KAAI,SAACC,EAAGC,GAAJ,OACfD,EAAEE,KAAOL,EAAOK,GAAhB,eAA0BF,EAA1B,CAA6BG,WAAYH,EAAEG,YAAcH,KAI7D,IAVQ,MAWN,MAAM,GAAN,mBAAWJ,GAAX,CAAkB,CAAEQ,MAAOP,EAAOO,MAAOD,WAAW,EAAOD,GAAIG,SAGjE,IAfW,SAgBT,OAAOT,EAAMU,QAAO,SAAAN,GAAC,OAAIA,EAAEE,KAAOL,EAAOK,MAG3C,QACE,OAAON,KAIPW,EAAe,CACnB,CACEL,GAAI,SACJE,MAAO,cACPD,WAAW,IAITK,EAAmB,CAAC,YAAa,YAAa,YAAa,eA8ElDC,MA5Ef,WAAiB,IAAD,EACYC,qBAAWf,EAAaY,GADpC,mBACPI,EADO,KACAC,EADA,OAEgCC,mBAAS,aAFzC,mBAEPC,EAFO,KAEUC,EAFV,KAKRC,EAAaC,iBAAO,MA0B1B,OAJAC,qBAAU,WACRC,SAASf,MAAT,oBAA8BO,EAAMS,OAApC,qBAIA,yBAAKC,UAAU,YAAYC,MAAO,CAAER,oBAClC,yBAAKO,UAAU,gBACb,yBAAKA,UAAU,sBAAf,UACA,4BACEE,SAAU,mBAZa,SAAAC,GAAK,OAAIT,EAAmBS,GAajDC,CADQ,EAAGC,OAAUC,SAItBnB,EAAiBT,KAAI,SAAAyB,GAAK,OACzB,4BAAQI,IAAKJ,EAAOK,MAAOL,EAAOG,MAAOH,SAI/C,yBAAKH,UAAU,UAAf,aACA,yBAAKA,UAAU,YACb,2BACEvB,KAAK,OACLgC,IAAKd,EACLe,UAAW,SAAAC,GAAK,OAnCF,SAAAA,GAEE,KAAlBA,EAAMC,UACRrB,EAAS,CAAEd,KAnDL,MAmDgBM,MAAO4B,EAAMN,OAAOC,QAC1CX,EAAWkB,QAAQC,QACnBnB,EAAWkB,QAAQP,MAAQ,IA8BHS,CAAcJ,OAGtC,yBAAKX,UAAU,aACZV,EAAMZ,KAAI,SAACC,EAAGC,GAAJ,OACT,yBAAKoB,UAAU,OAAOO,IAAG,eAAU5B,EAAEE,KACnC,yBAAKmB,UAAU,cAAcrB,EAAEI,OAC/B,yBAAKiB,UAAU,eACb,2BACEvB,KAAK,WACLuC,QAASrC,EAAEG,UACXoB,SAAU,kBAtDHrB,EAsDsBF,EAAEE,QArD3CU,EAAS,CAAEd,KA3CA,SA2CcI,OADN,IAAAA,OAyDTF,EAAEG,WACF,yBAAKkB,UAAU,eACb,4BAAQiB,QAAS,kBAvDVpC,EAuD6BF,EAAEE,QAtDlDU,EAAS,CAAEd,KA9CA,SA8CcI,OADN,IAAAA,IAuDP,cC7FIqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS1B,SAAS2B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ee63fa4d.chunk.js","sourcesContent":["import React, { useReducer, useRef, useState, useEffect } from 'react'\nimport uuid from 'uuid/v1'\nimport './App.css'\n\nconst TOGGLE = 'TOGGLE'\nconst DELETE = 'DELETE'\nconst ADD = 'ADD'\n\nconst todoReducer = (state, action) => {\n  switch (action.type) {\n    case TOGGLE: {\n      return state.map((e, i) =>\n        e.id === action.id ? { ...e, completed: !e.completed } : e\n      )\n    }\n\n    case ADD: {\n      return [...state, { title: action.title, completed: false, id: uuid() }]\n    }\n\n    case DELETE: {\n      return state.filter(e => e.id !== action.id)\n    }\n\n    default:\n      return state\n  }\n}\n\nconst initialTodos = [\n  {\n    id: 'someId',\n    title: 'Learn hooks',\n    completed: false\n  }\n]\n\nconst backgroundColors = ['lightgrey', 'lightblue', 'lightpink', 'lightyellow']\n\nfunction App () {\n  const [todos, dispatch] = useReducer(todoReducer, initialTodos)\n  const [backgroundColor, setBackgroundColor] = useState('lightgrey')\n\n  // Holds a mutable object that doesn't change throughout the component's lifecycle\n  const addTodoRef = useRef(null)\n\n  const handleToggle = id => {\n    dispatch({ type: TOGGLE, id })\n  }\n\n  const handleDelete = id => {\n    dispatch({ type: DELETE, id })\n  }\n\n  const handleKeyDown = event => {\n    // Enter\n    if (event.keyCode === 13) {\n      dispatch({ type: ADD, title: event.target.value })\n      addTodoRef.current.focus()\n      addTodoRef.current.value = ''\n    }\n  }\n\n  const handleChangeBackground = color => setBackgroundColor(color)\n\n  // Used for side effects: think `componentDidMount`, `componentWillUnMount` and `componentDidUpdate` together in one method\n  useEffect(() => {\n    document.title = `There are ${todos.length} todos created`\n  })\n\n  return (\n    <div className='container' style={{ backgroundColor }}>\n      <div className='color-toggle'>\n        <div className='color-toggle-title'>Theme:</div>\n        <select\n          onChange={({ target: { value: color } }) =>\n            handleChangeBackground(color)\n          }\n        >\n          {backgroundColors.map(color => (\n            <option key={color} label={color} value={color} />\n          ))}\n        </select>\n      </div>\n      <div className='banner'>Add to-do</div>\n      <div className='add-todo'>\n        <input\n          type='text'\n          ref={addTodoRef}\n          onKeyDown={event => handleKeyDown(event)}\n        />\n      </div>\n      <div className='todo-list'>\n        {todos.map((e, i) => (\n          <div className='todo' key={`todo-${e.id}`}>\n            <div className='todo-title'>{e.title}</div>\n            <div className='todo-toggle'>\n              <input\n                type='checkbox'\n                checked={e.completed}\n                onChange={() => handleToggle(e.id)}\n              />\n            </div>\n            {!e.completed && (\n              <div className='todo-delete'>\n                <button onClick={() => handleDelete(e.id)}>X </button>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}